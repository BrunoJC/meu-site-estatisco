{"version":3,"sources":["logo.svg","api.js","pesquisa.js","pesqui.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","api","axios","create","baseURL","React","Component","Apps","teste","App","state","filmes","filmeEscolhido","enviaForm","bind","setFilme","escolha","get","response","console","log","this","setState","data","evento","preventDefault","escolhaFilme","String","pegandoUrl","target","value","className","onSubmit","type","onChange","map","filme","key","show","id","name","premiered","runtime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,8MCO5BC,E,OAJHC,EAAMC,OAAO,CACrBC,QAAS,4CCCUC,IAAMC,U,OCiBdC,ICdXC,EAAQ,GAwFGC,E,kDApFb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAACC,OAAO,GAAIC,eAAiB,IAC1C,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAJJ,E,gGAUGE,G,uFAEQf,EAAIgB,IAAID,G,OAAzBE,E,OACNC,QAAQC,IAAI,IAAIZ,GAChBa,KAAKC,SAAS,CAAEX,OAAQO,EAASK,O,uIAGzBC,GACRA,EAAOC,iBACP,IAAIC,EAAeL,KAAKX,MAAME,eAK9B,OAJAJ,EAAQkB,EACRlB,EAAQmB,OAAOnB,GACfa,KAAKO,WAAWpB,GAChBW,QAAQC,IAAIZ,GACLkB,I,+BAKAF,GACPH,KAAKC,SAAS,CAACV,eAAeY,EAAOK,OAAOC,U,+BAMrC,IAECnB,EAAWU,KAAKX,MAAhBC,OAER,OAEE,yBAAKoB,UAAU,QAEb,sCAGA,yBAAKA,UAAU,QAET,0BAAMC,SAAUX,KAAKR,WACjB,2BAAOoB,KAAK,OAAOH,MAAOT,KAAKX,MAAME,eAAgBsB,SAAUb,KAAKN,WAEpE,4BAAQkB,KAAK,UAAb,eAKV,2BAAOF,UAAU,UAEf,4BACA,sCACA,oCACA,6CACA,8CAGCpB,EAAOwB,KAAI,SAAAC,GAAK,OAEf,wBAAIC,IAAKD,EAAME,KAAKC,IAChB,4BAAKH,EAAME,KAAKE,MAChB,4BAAKJ,EAAME,KAAKL,MAChB,4BAAKG,EAAME,KAAKG,WAChB,4BAAKL,EAAME,KAAKI,QAAhB,sB,GA1EEpC,aCEEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.7d64e851.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\r\nimport Pesquisa from './pesquisa'\r\n\r\nconst api = axios.create({\r\n    baseURL: 'https://api.tvmaze.com/search/shows?q=:'\r\n});\r\n\r\nexport default api;","import { render } from '@testing-library/react';\r\nimport React, { useState, useEffect,Component } from 'react';\r\nimport api from './api'\r\nimport App from './App'\r\n\r\nclass Pesquisa extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {value: ''};\r\n     \r\n      \r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    \r\n  \r\n\r\n    handleChange(event) {\r\n        this.setState({value: event.target.value});\r\n      }\r\n    \r\n     handleSubmit(event) {\r\n        \r\n        \r\n        var nomeFilme = this.state.value\r\n        return nomeFilme\r\n        \r\n        event.preventDefault();\r\n       \r\n        \r\n        \r\n      }\r\n    \r\n      render() {\r\n        \r\n        return (\r\n            \r\n          <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n              Filme:\r\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n            </label>\r\n            <input type=\"submit\" value=\"Enviar\" />\r\n          </form>\r\n          \r\n        );\r\n      }\r\n    }\r\n    \r\n    export default Pesquisa;\r\n    \r\n    ","import React, { useState, useEffect, Component } from 'react';\r\n\r\nfunction Apps(){\r\n\r\n    const [obternome, setobternome] = useState('')\r\n  \r\n    function pegarNome(){\r\n        const setobternome = setobternome.length > 0 ? `&ethnicity=${setobternome}` : ''\r\n        console.log('teste entrou na funcção', setobternome)\r\n    }\r\n\r\n    return(\r\n            <div className='Form'>\r\n                <input type=\"text\" onChange={e => setobternome(e.target.value)}/>\r\n                <button type='button' onClick={pegarNome}></button>\r\n            </div>\r\n        );\r\n\r\n    \r\n\r\n};\r\n\r\nexport default Apps;","import React, { useState, useEffect,Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Pesquisa from './pesquisa'\nimport api from './api'\nimport Apps from './pesqui';\n\nvar teste = ''\n\nclass App extends Component{\n\n  constructor() {\n    super();\n    this.state = {filmes:[], filmeEscolhido : ''};\n    this.enviaForm = this.enviaForm.bind(this);\n    this.setFilme = this.setFilme.bind(this);\n  }\n\n   \n  \n  \n  async pegandoUrl(escolha){\n    \n    const response = await api.get(escolha);\n    console.log('p',teste)\n    this.setState({ filmes: response.data })\n  }\n\n  enviaForm(evento) {\n    evento.preventDefault()\n    var escolhaFilme = this.state.filmeEscolhido;\n    teste = escolhaFilme;\n    teste = String(teste)\n    this.pegandoUrl(teste)\n    console.log(teste)\n    return escolhaFilme;\n    \n    \n  } \n\n  setFilme(evento){\n    this.setState({filmeEscolhido:evento.target.value});\n\n  }\n\n  \n\n  render(){\n\n    const { filmes } = this.state;\n\n    return(\n\n      <div className=\"main\">\n \n        <h1>MOVIES</h1>\n\n         \n        <div className='Form'>\n\n              <form onSubmit={this.enviaForm}>\n                  <input type=\"text\" value={this.state.filmeEscolhido} onChange={this.setFilme} />\n            \n                  <button type='submit'>Pesquisar</button>\n              </form>\n        </div>\n\n        \n        <table className='tabela'>\n        \n          <tr>\n          <td>Titulo</td>\n          <td>Tipo</td>\n          <td>Lançamento</td>\n          <td>Duração</td>\n          </tr>\n          \n          {filmes.map(filme => (\n\n            <tr key={filme.show.id}>\n                <td>{filme.show.name}</td>\n                <td>{filme.show.type}</td>\n                <td>{filme.show.premiered}</td>\n                <td>{filme.show.runtime} Minutos</td>\n              \n            </tr>\n           \n          ) )}\n\n        </table>\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}